{
	"info": {
		"_postman_id": "9b12c599-2a57-43f4-a856-7ad6ac56558b",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20489177"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request \r",
							"\r",
							"pm.test(\"user_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Diana\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request\r",
							"\r",
							"pm.test(\"user_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"29\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"\r",
							"pm.test(\"user_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"req_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"req_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"req_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql((+req.salary) * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Diana",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4.Спарсить request\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"req_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"req_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"req_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log (jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name_Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include('Luky');\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age_4\", function () {\r",
							"    pm.expect(String(jsonData.family.pets.dog.age)).to.include('4');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Karina&age=23&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Karina"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "700"
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4.Спарсить request\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log(req)\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"req_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"req_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//7.Вывести в консоль параметр salary из request\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"//8.Вывести в консоль параметр salary из response\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"req_salary[0]\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"req_salary[1]\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"req_salary[2]\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+req.salary * 3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set('name', ' ')\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set('age', ' ')\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set('salary', ' ')\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set('name', 'Maximus')\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set('age', '32')\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set('salary', '5000')\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (let el in jsonData.salary) {\r",
							"    console.log(jsonData.salary[el]);\r",
							"}\r",
							"\r",
							"/// или\r",
							"\r",
							"console.log(Object.values(jsonData.salary))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Natali&age=52&salary=1300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Natali"
						},
						{
							"key": "age",
							"value": "52"
						},
						{
							"key": "salary",
							"value": "1300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6.Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//7.Спарсить request\r",
							"\r",
							"let req = request.data\r",
							"console.log (req)\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary == salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months == salary * 2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months == salary * 2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year == salary * 3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years == salary * 3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_name[1] == salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"u_age == age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years == salary * 4.2\", function () {\r",
							"    pm.expect(jsonData.person[\"u_salary_5_years\"]).to.eql(req.salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"console.log(Object.values(jsonData.person))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}